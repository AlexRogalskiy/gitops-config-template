postgresql:
  global:
    postgresql: {}
  fullnameOverride: inventory-postgres
  existingSecret: inventory-postgres
  image:
    debug: false
    pullPolicy: Always
  volumePermissions:
    enabled: true
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/minideb
      tag: stretch
    securityContext:
      runAsUser: "auto"
  shmVolume:
    chmod:
      enabled: false
  containerSecurityContext:
    enabled: false    
  securityContext:
    enabled: false
    fsGroup: 1001
    runAsUser: 1001
  serviceAccount:
    enabled: true
  replication:
    applicationName: my_application
    enabled: false
    numSynchronousReplicas: 0
    password: repl_password
    slaveReplicas: 1
    synchronousCommit: "off"
    user: repl_user
  postgresqlUsername: "admin"
  usePasswordFile: false
  postgresqlDatabase: "inventory"
  postgresqlDataDir: /bitnami/postgresql/data
  service:
    annotations: {}
    port: 5432
    type: ClusterIP
  persistence:
    accessModes:
    - ReadWriteOnce
    enabled: true
    mountPath: /bitnami/postgresql
    size: 2Gi
    storageClass: stakater 
    subPath: ""
  updateStrategy:
    type: RollingUpdate
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1Gi
  networkPolicy:
    allowExternal: true
    enabled: false
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
application:
  applicationName: "inventory"
  
  labels:
    group: com.stakater
    team: nordmart
  configMap:
    enabled: true
    files:
    - nameSuffix: ""
      data:
        JAEGER_ENDPOINT: "http://jaeger-collector.istio-system:14268/api/traces"
        POSTGRESQL_HOST: inventory-postgres
        DB_NAME: "inventory"
  sealedSecret:
    enabled: true
    files:
      - name: inventory-postgres
        encryptedData:
          postgresql-password: AgCGNdFH8keTqQhcTV9tX3flDPvOkMZkJ3CUjSIcBjkBDlhnAk5sr5tVzMoomnv7bBR8Pvts1vKTPocBfw0Jqf/7TJDMDd3X3apFviru6h5JTjx0ZT5U9/CQn1Jt+GaZc9d98pRfuaLWlkLReFf5Wm/knkNM2wWWbrm4HGqbUJEHJ5MhaxFOiM7i7s0ge1CyiOAa50322/2WD/X7bPCmaoN5Wke1Yeek3SdpfGw+D9Q0aY0KcJipWqON1Kvdz94PXpl+iVmGRGb5tND2+XpiKCNXK6mQcVYRTmi0tgwNZDo/5MQrT9Sx1VJpgdxpGvIq0cIPYX5SbWSG50Rc2vp6utGaYAVOp8bH6Uu4/QfIyxOrfwwjpefOniyjumuZdIAquTxBGOOLWSpsl4+IuPa6ZiAvg9Xa/UYXhBETTVlkoSoi899i7cWgcrnhJgZtN7hR/mpbepN9Ns5e78ntsx0Kqke55SV8h5YCTy2ZyV1z82ybAnivA+7ksCzHHPbHeiYFs6H7Ld0MFVMNJG8y/H1JOsrknrWTJgF5WuyTZIs8VrcHi9+yccXf4ZqPVx1Uq4Mqvde8QJlhYoCxlGVVJtYRJGfV9v1Bpw+thFuOk0KWt1HO+rqvnng35bb5TCjFQQjkYE5QnTJ5vTwf4Y8xE35zOQ6LGi9AX0rsiYk0Auwh3go9vTQBl3KCwKT4cZDmF5xXbnFtKaKTdSanvx4=
  deployment:
    envFrom:
    - type: configmap
      name: ""
    replicas: 2
    volumes: []
    volumeMounts: []
    securityContext: []
    podLabels: []
    additionalPodAnnotations:
      app: "inventory"
      team: "nordmart"
    image:
      repository: stakater/stakater-nordmart-inventory
      tag: v0.0.1
    resources: 
      limits:
        memory: 1Gi
        cpu: 0.5
      requests:
        memory: 128Mi
        cpu: 0.1
    imagePullSecrets: nexus-docker-config-forked   
    env:
    - name: POSTGRESQL_PASSWORD
      valueFrom:
        secretKeyRef:
          name: inventory-postgres
          key: postgresql-password
    probes:
      readinessProbe:
        failureThreshold: 3
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
        initialDelaySeconds: 15
        httpGet:
          path: /actuator/health
          port: 8080
      livenessProbe:
        failureThreshold: 3
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
        initialDelaySeconds: 15
        httpGet:
          path: /actuator/health
          port: 8080
  
  # Role based access control
  rbac:
    enabled: true
    serviceAccount:
      enabled: true
  
  # Service configuration
  service:
    ports:
    - port: 8080
      name: http
      targetPort: 8080
  
  # Openshift route
  route:
    enabled: true
    annotations: []
    additionalLabels: 
      router: default
    port:
      targetPort: http
    wildcardPolicy: None
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
  
  # Service monitor to collect prometheus metrices
  serviceMonitor:
    enabled: true
    
    # List of the endpoints of service from which prometheus will scrape data
    endpoints:
    - interval: 5s
      path: /prometheus
      port: http
